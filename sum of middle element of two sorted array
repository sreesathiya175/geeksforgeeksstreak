//{ Driver Code Starts
// Initial Template for Java

import java.util.*;


// } Driver Code Ends
// User function Template for Java

class Solution {
    public int SumofMiddleElements(int[] arr1, int[] arr2) {
        int x = arr1.length;
        int y = arr2.length;
        
        // Ensure arr1 is the smaller array for easier handling
        if (x > y) {
            int[] temp = arr1;
            arr1 = arr2;
            arr2 = temp;
            x = arr1.length;
            y = arr2.length;
        }

        int low = 0, high = x;
        
        while (low <= high) {
            int partitionX = (low + high) / 2;
            int partitionY = (x + y + 1) / 2 - partitionX;
            
            // Handle edge cases
            int maxX = (partitionX == 0) ? Integer.MIN_VALUE : arr1[partitionX - 1];
            int minX = (partitionX == x) ? Integer.MAX_VALUE : arr1[partitionX];
            int maxY = (partitionY == 0) ? Integer.MIN_VALUE : arr2[partitionY - 1];
            int minY = (partitionY == y) ? Integer.MAX_VALUE : arr2[partitionY];
            
            if (maxX <= minY && maxY <= minX) {
                // Even length
                if ((x + y) % 2 == 0) {
                    return Math.max(maxX, maxY) + Math.min(minX, minY);
                } else { // Odd length
                    return Math.max(maxX, maxY);
                }
            } else if (maxX > minY) {
                high = partitionX - 1;
            } else {
                low = partitionX + 1;
            }
        }
        
        throw new IllegalArgumentException("Input arrays are not sorted or invalid.");
    }
}


//{ Driver Code Starts.
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();
        sc.nextLine(); // Consume newline
        while (t-- > 0) {
            String[] input1 = sc.nextLine().split(" ");
            int[] arr = new int[input1.length];
            for (int i = 0; i < input1.length; i++) {
                arr[i] = Integer.parseInt(input1[i]);
            }

            String[] input2 = sc.nextLine().split(" ");
            int[] brr = new int[input2.length];
            for (int i = 0; i < input2.length; i++) {
                brr[i] = Integer.parseInt(input2[i]);
            }

            Solution ob = new Solution();
            int res = ob.SumofMiddleElements(arr, brr);
            System.out.println(res);
        }
    }
}

// } Driver Code Ends
