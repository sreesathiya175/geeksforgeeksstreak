//{ Driver Code Starts
// Initial Template for Java

import java.util.*;

class Rat {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        int t = sc.nextInt();

        while (t-- > 0) {
            int n = sc.nextInt();
            int[][] a = new int[n][n];
            for (int i = 0; i < n; i++)
                for (int j = 0; j < n; j++) a[i][j] = sc.nextInt();

            Solution obj = new Solution();
            ArrayList<String> res = obj.findPath(a);
            Collections.sort(res);
            if (res.size() > 0) {
                for (int i = 0; i < res.size(); i++) System.out.print(res.get(i) + " ");
                System.out.println();
            } else {
                System.out.println(-1);
            }
        }
    }
}

// } Driver Code Ends


class Solution {
    public ArrayList<String> findPath(int[][] mat) {
        ArrayList<String> result = new ArrayList<>();
        int n = mat.length;
        if (mat[0][0] == 0 || mat[n-1][n-1] == 0) {
            return result; // No path if start or end is blocked
        }
        boolean[][] visited = new boolean[n][n];
        StringBuilder path = new StringBuilder();
        dfs(mat, 0, 0, n, visited, path, result);
        Collections.sort(result);
        return result;
    }
    
    private void dfs(int[][] mat, int x, int y, int n, boolean[][] visited, StringBuilder path, ArrayList<String> result) {
        // Check if we reached the destination
        if (x == n-1 && y == n-1) {
            result.add(path.toString());
            return;
        }
        
        // Mark this cell as visited
        visited[x][y] = true;
        
        // Possible directions: Down, Up, Right, Left
        int[] rowDirs = {1, -1, 0, 0};
        int[] colDirs = {0, 0, 1, -1};
        char[] moves = {'D', 'U', 'R', 'L'};
        
        for (int i = 0; i < 4; i++) {
            int newX = x + rowDirs[i];
            int newY = y + colDirs[i];
            if (isSafe(newX, newY, n, mat, visited)) {
                path.append(moves[i]);
                dfs(mat, newX, newY, n, visited, path, result);
                // Backtrack
                path.deleteCharAt(path.length() - 1);
            }
        }
        
        // Unmark this cell as visited
        visited[x][y] = false;
    }
    
    private boolean isSafe(int x, int y, int n, int[][] mat, boolean[][] visited) {
        return x >= 0 && x < n && y >= 0 && y < n && mat[x][y] == 1 && !visited[x][y];
    }
}
